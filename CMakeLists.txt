cmake_minimum_required(VERSION 3.0...3.25)
project(
  LearnWebGPU # name of the project, which will also be the name of the visual
              # studio solution if you use it
  VERSION 0.1.0 # any version number
  LANGUAGES CXX C # programming languages used by the project
)

if(NOT EMSCRIPTEN)
  add_subdirectory(glfw)
else()
  add_library(glfw INTERFACE)
  target_link_options(glfw INTERFACE -sUSE_GLFW=3)
endif()

add_subdirectory(glfw3webgpu)

add_subdirectory(webgpu)

# We specify that we want to create a target of type executable, called "App"
add_executable(App main.cpp webgpu-utils.h webgpu-utils.cpp)

target_link_libraries(App PRIVATE webgpu glfw glfw3webgpu)

target_copy_webgpu_binaries(App)

# Set some recommended properties to configure the version of C++ and treat
# warnings as errors
set_target_properties(
  App
  PROPERTIES CXX_STANDARD 17
             CXX_STANDARD_REQUIRED ON
             CXX_EXTENSIONS OFF
             COMPILE_WARNING_AS_ERROR ON)

# Also add more warnings, to minimize mistakes
if(MSVC)
  target_compile_options(App PRIVATE /W4)
else()
  target_compile_options(App PRIVATE -Wall -Wextra -pedantic)
endif()

# Generate "schemes" for XCode (macOS) and enable shader debugging (will become
# handy later on)
if(XCODE)
  set_target_properties(
    App PROPERTIES XCODE_GENERATE_SCHEME ON
                   XCODE_SCHEME_ENABLE_GPU_FRAME_CAPTURE_MODE "Metal")
endif()

if(EMSCRIPTEN)
  set_target_properties(App PROPERTIES SUFFIX ".html")
  target_link_options((App PRICVATE -sASYNCIFY))
endif()
